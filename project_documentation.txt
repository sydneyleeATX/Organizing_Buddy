Organizing Buddy Project Documentation
==========================================

Objective
Organizing Buddy is a mobile-first web application that guides users through a structured 7-step home organization process. The app helps users systematically organize any space by providing step-by-step instructions, progress tracking, and helpful tools throughout their organizing journey.
Order of Implementation
I followed a layered development approach:

Application Skeleton: Established the basic UI framework and navigation system between the seven organizing pages
Menu System: Added functionality for users to view past and current projects, plus a contextual tools menu that adapts to each organizing step
Progress Tracking System: Implemented a navigation-based progress tracking system using React Context that automatically tracks user progress as they navigate through steps using the back arrow and center button 

Core Functionality
Basic UI
All organizing pages are styled using a Layout CSS module, which contains details for styling the menu button in the top left corner of the application. There are seven organizing steps, each with their own page and logic. Each page contains header HTML text of the page name, instructional text for the user, and navigation controls including back and forward arrows and a center button (often displaying "I'm ready to..." or "Next") to proceed through the workflow. Each organizing page is described in more detail below:

All organizing pages share a consistent layout styled with a `Layout` CSS module, which standardizes the menu button positioning in the top left corner and overall page structure. The application follows a linear workflow, where each step has its own dedicated page with specific logic and components. Each of the organizing step pages is described in detail below:
Zone
Purpose: Project initialization - allows users to name their project and optionally upload a "before" photo
State Management:
`zoneName`: Stores the user-entered project title
`zonePhoto`: Handles initial photo of the space
`projectCreated`: Tracks whether this is a new or resumed project
Project Detection Logic:
A `useEffect` hook monitors `router.isReady` and `router.query` changes to check if a project with the entered `zoneName` already exists in the localStorage projects array. If found, the user is automatically redirected to that project's current step using `useRouter`.
Project Creation Workflow:
Another `useEffect` manages the project creation flow by monitoring `confirmedZoneName`, `confirmedZonePhoto`, `skipPhoto`, and `zoneName` props. When a user submits a project name (`confirmedZoneName` becomes true), they must either upload a photo or skip the upload. Once this requirement is met and `projectCreated` is false, the `createNewProject()` function is called.
Data Structure:
The `createNewProject()` function creates and saves a project object to localStorage containing: Project title (zoneName), Start date, Current step, Status ("completed" or "in progress"), Last update timestamp, Notes field
Components: Tools button, Space suggestions

Empty
Purpose: Instructs users to clear items out of their space
State Management: Inherits `zoneName` from router context to maintain project continuity
Components: Tools button, Timeline, Project Notes, Ask an Expert
Declutter
Purpose: Facilitates the decision-making process for determining which items to keep, donate, or discard from the user's collection
State Management: Inherits `zoneName` from router context
Visual Organization System: The page implements a three-column flex layout displaying categorization options
Decision Support Tools:
Keep Quiz: Interactive questionnaire to guide keep/donate/trash decisions
Declutter Tips: Contextual advice for common decluttering challenges
Components: Tools button, Timeline, Project Notes, Ask an Expert, Declutter Tips, Keep Quiz
Clean
Purpose: Instructs users to clean their space in preparation for putting their items back 
State Management: Inherits `zoneName` from router context
Components: Tools button, Timeline, Project Notes, Ask an Expert
Categorize
Purpose: Instructs users to categorize their items based on functionality
State Management: Inherits ‘zoneName’ from router context
Components: Tools button, Timeline, Project Notes, Ask an Expert
Return
Purpose: Provides guidance for strategically returning the categorized items to the space  
State Management:
`confirmedItemsReturned`: Boolean tracking whether user has finished placing items
`confirmedPhotoUploaded`: Boolean tracking completion of final photo upload
`skipPhoto`: Boolean allowing users to bypass photo requirement
 Inherits `zoneName` from router context
Support Tools: 
Storage Tips: Dropdown lists effective categorization strategies for different types of spaces 
Product Suggestions: Navigates user to marketplace to shop for storage solutions
Photo Documentation 
A `useEffect` monitors the completion states. When `confirmedItemsReturned` becomes true, users are prompted to upload a final "after" photo of their organized space. The workflow continues when either `confirmedPhotoUploaded` or `skipPhoto` is set to true, triggering navigation to the completion page via `useRouter`.
Components: Tools button, Timeline, Project Notes, Ask an Expert, Product Suggestions, Storage Tips
Complete
Purpose: Congratulates the user on having completed their project
State Management: Inherits `zoneName` from router context
Components: Confetti, Page Navigation
Tools Menu
The tools menu function, ‘FabButton’, accepts an actions argument that allows the tools bar to show different tools on each page. The status of the tools button’s side panel is tracked with the ‘useState’ hooks ‘open’ and ‘setOpen’. When ‘open’ is true, the side panel is displayed. When the user clicks away from the side panel it disappears. This functionality is controlled by an aside HTML component that specifies when a click is detected outside the panel ‘setOpen’ is changed to false. 
Project Notes: 
const ProjectNotesModal=({open, initialNotes, zoneName, onClose, onSave })
This modal component enables users to write and retrieve project-specific notes at any stage of the organizing process. It uses `useState` hooks (`notes`, `setNotes`) and a `useEffect` that monitors `initialNotes` and `open` props. When activated, it retrieves existing notes from the localStorage projects array using the `zoneName` as the key, then saves updates back to localStorage.
Keep It? Quiz
A decision-making tool with five questions, each answer having weighted point values. The quiz calculates scores for Keep/Donate/Trash categories and recommends the highest-scoring option. Implementation uses `useState` hooks to track current question index, user answers array, category scores, and results display state. The quiz progresses by incrementing the current question index until completion, then displays results.

Ask an Expert
An AI chat interface powered by the Gemini API. The core logic resides in the `handleSend()` async function, which:
Updates the `messages` useState variable
Makes an HTTP POST request to Gemini
Converts the JSON response to JavaScript
Includes error handling that displays "Error contacting AI" on API failures

Tips Popups
A tips popup is implemented in the declutter page and return page. In both pages, a dropdown module is imported to organize the text. The labels and items within each dropdown are specific to the page in which the dropdown is being displayed.
Progress Tracking
The progress tracking system uses navigation-based step completion combined with React Context to automatically track user progress as they move through the organizing workflow.

React Context Architecture
The `DoneStepsProvider` component provides context for managing completed tasks across all projects through three key functions:


`getDoneSteps(zoneName)`
This function returns an array of completed steps for a given project name. If no steps exist for the zone, it returns an empty array.
`setStepChecked(zoneName, step, checked)`
This function handles adding or removing steps from a project's completion list when users navigate through the workflow. The logic works as follows:
If the `checked` parameter is true: the step is added to the list (if not already present)
If the `checked` parameter is false: the step is filtered from the list (when using back navigation)
After updating the step list, `utils.updateProjectStep` is called to update the project status and current step.
`removeZoneSteps(zoneName)`
This function completely clears all completed steps for a project when it's deleted. This ensures that if a new project is created with the same name in the future, step tracking starts fresh because the project's entry is deleted from `doneStepsByZone`.


Project Status Management
‘updateProjectStep(zoneName, doneStepsInput)’
This utility function maintains project status accuracy by:
Retrieving the current projects array from localStorage
Comparing `doneStepsInput` against the ordered list of organizing steps
Determining the `currentStep` (the leftmost incomplete step)
Setting status to "In Progress" if `currentStep` is not "complete"
Updating the projects array with the new completion data, current step, and status

Timeline
The `Timeline` component appears on all workflow pages as a horizontal progress indicator that serves two purposes: visual progress tracking and quick navigation.The timeline displays as a series of connected dots, where each dot represents one of the seven organizing steps. Dots are filled in based on the user's current position in the workflow, providing immediate visual feedback on progress.The component accepts the current page as a prop and uses a mapping object to correlate each organizing step with its corresponding route path and workflow index. This mapping enables:
Accurate visual representation of progress
Direct navigation to any step via `useRouter`

Navigation-Based Progress Flow
The complete interaction between navigation controls, React Context, and project status management follows this flow:

Navigation Trigger
When users click the center button ("I'm ready to..." or "Next") or use the back arrow, the `handleNextStep` function is called within the current page component.

Step Completion Handler
The `handleNextStep` function calls `setStepChecked(zoneName, currentPageName, true)` to mark the current step as completed before navigating to the next page. When using back navigation, steps may be unmarked by calling `setStepChecked` with `false`.

Project Status Update Chain
Within `setStepChecked()`, `utils.updateProjectStep` is called to maintain project accuracy by updating the current step and project status.

Real-time Synchronization
This integration ensures that:
Progress tracking is automatically updated based on user navigation
Project status accurately reflects completion progress
Users can navigate between pages without losing progress
The timeline component reflects the current progress state

Challenges
Migrating Tracking from Local Component State to React Context
Initially, project tracking was being done solely via the project array in localStorage. When navigation-based progress tracking was implemented, there was a need for a centralized system to manage step completion across page navigation. Without a global state management solution, progress tracking would be inconsistent and projects would lose their completion state during navigation.

The implementation of React Context (via DoneStepsContext) solved these problems by:
Creating a centralized, persistent store for all completed steps across all project zones
Ensuring step completion states persist across page navigation and browser sessions
Providing a single source of truth that all components can access and update
Enabling real-time synchronization between navigation actions and progress tracking
Automatically updating project status and current step through the `utils.updateProjectStep` function

Outcome
The migration from localStorage-based step tracking to React Context has delivered significant improvements in application reliability and user experience:

Technical Benefits:
- Eliminated data loss issues that could occur from component remounting during navigation
- Removed race conditions between multiple components accessing localStorage simultaneously
- Centralized state management reduces complexity and improves maintainability
- Consistent step tracking across all pages without risk of accidental data overwrites

User Experience Improvements:
- Seamless progress preservation during navigation between organizing steps
- Reliable step completion tracking that persists across browser sessions
- Real-time timeline updates that accurately reflect current progress
- Consistent project status synchronization across all application components

System Reliability:
- Single source of truth eliminates state inconsistencies
- Robust error handling through centralized context provider
- Improved debugging capabilities with centralized state management
- Future-proof architecture that can easily accommodate additional tracking features
